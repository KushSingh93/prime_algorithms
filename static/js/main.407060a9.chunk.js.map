{"version":3,"sources":["primalityIndicator.jsx","workingIndicator.jsx","timeIndicator.jsx","deterministicTest.jsx","fermatTest.jsx","bigPrimes.js","carmichaelNums.js","App.jsx","index.js"],"names":["PrimalityIndicator","props","num","toString","isPrime","Badge","pill","variant","WorkingIndicator","Spinner","animation","TimeIndicator","time","toFixed","DeterministicPrimalityTest","useState","isProcessing","setIsProcessing","factors","setFactors","timeTaken","setTimeTaken","setNum","useEffect","timerStart","performance","now","n","callBack","BigInt","indx","processBatch","cnt","setTimeout","findFactor","computedFactors","timerEnd","class","modularExp","base","exp","p","x","res","Number","FermatPrimalityTest","setBase","iterations","computedBase","iter","checkedBases","Set","add","randBase","has","Math","floor","random","expRemainder","fermatCheck","pow","bigPrimes","biggerPrimes","carmichaelNums","App","formNum","setFormNum","confidence","setConf","setIter","wrongInput","setWrongInput","handleSubmit","inputToNum","replace","ceil","log2","href","target","rel","type","value","onChange","e","onKeyPress","charCode","Button","bsPrefix","onClick","length","p1","p2","style","width","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.407060a9.chunk.js","sourcesContent":["import React from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\n\nconst PrimalityIndicator = (props) => {\n  return (\n    <div>\n      {props.num.toString()} is...\n      <br />\n      {props.isPrime ? (\n        <h4>\n          <Badge pill variant=\"success\">\n            PRIME\n          </Badge>\n        </h4>\n      ) : (\n        <h4>\n          <Badge pill variant=\"danger\">\n            COMPOSITE\n          </Badge>\n        </h4>\n      )}\n    </div>\n  );\n};\n\nexport default PrimalityIndicator;\n","import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst WorkingIndicator = () => {\n  return (\n    <div>\n      <br />\n      <Spinner animation=\"grow\" />\n      <br />\n      Working...\n    </div>\n  );\n};\n\nexport default WorkingIndicator;\n","import React from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\n\nconst TimeIndicator = (props) => {\n  return (\n    <h5>\n      Time taken: <Badge variant=\"secondary\">{props.time.toFixed(3)} ms</Badge>\n    </h5>\n  );\n};\n\nexport default TimeIndicator;\n","/* globals BigInt */\n\nimport React, { useState, useEffect } from \"react\";\nimport PrimalityIndicator from \"./primalityIndicator\";\nimport WorkingIndicator from \"./workingIndicator\";\nimport TimeIndicator from \"./timeIndicator\";\n\nconst findFactor = (n, callBack) => {\n  n = BigInt(n);\n  let indx = BigInt(2);\n  const batchSize = 10000;\n\n  const processBatch = () => {\n    let cnt = batchSize;\n    for (; indx * indx <= n && cnt > 0; indx++, cnt--) {\n      if (n % indx === 0n) {\n        callBack([indx, n / indx]);\n        return;\n      }\n    }\n    if (indx * indx <= n) {\n      setTimeout(processBatch, 0);\n    } else {\n      callBack([1n, n]);\n    }\n  };\n  processBatch();\n};\n\nconst DeterministicPrimalityTest = (props) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [factors, setFactors] = useState([1, 0]);\n  const [timeTaken, setTimeTaken] = useState(0);\n  const [num, setNum] = useState(2);\n\n  useEffect(() => {\n    setIsProcessing(true);\n    setNum(props.num);\n\n    let timerStart = performance.now();\n    findFactor(props.num, (computedFactors) => {\n      setFactors(computedFactors);\n      let timerEnd = performance.now();\n      setTimeTaken(timerEnd - timerStart);\n      setIsProcessing(false);\n    });\n  }, [props.num]);\n\n  return (\n    <div>\n      <h4>Deterministic Check</h4>\n      {isProcessing ? (\n        <WorkingIndicator />\n      ) : (\n        <div>\n          <PrimalityIndicator num={num} isPrime={factors[0] < 2} />\n          {factors[0] > 1 ? (\n            <p class=\"my-2\">\n              Factors found: {factors[0].toString()} x {factors[1].toString()}\n            </p>\n          ) : (\n            <p class=\"my-2\">Could not factorize.</p>\n          )}\n          <TimeIndicator time={timeTaken} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DeterministicPrimalityTest;\n","/* globals BigInt */\n\nimport React, { useState, useEffect } from \"react\";\nimport PrimalityIndicator from \"./primalityIndicator\";\nimport WorkingIndicator from \"./workingIndicator\";\nimport TimeIndicator from \"./timeIndicator\";\n\n// calculate x^y % p efficiently\nconst modularExp = (base, exp, p) => {\n  let x = BigInt(base);\n  p = BigInt(p);\n  x = x % p;\n  let res = BigInt(1);\n\n  while (exp > 0n) {\n    if ((exp & 1n) === 1n) {\n      res = (res * x) % p;\n    }\n\n    x = (x * x) % p;\n    exp = exp >> 1n;\n  }\n\n  return Number(res);\n};\n\nconst fermatCheck = (n, iter) => {\n  if (n > 2) {\n    let checkedBases = new Set();\n    checkedBases.add(1);\n\n    while (iter--) {\n      let randBase = 1;\n      while (checkedBases.has(randBase)) {\n        randBase = BigInt(Math.floor(Math.random())) * n;\n        if (randBase < 2n) randBase = 2n;\n      }\n      let expRemainder = modularExp(randBase, n - 1n, n);\n      if (expRemainder !== 1) return [randBase, expRemainder];\n    }\n  }\n\n  return [1, 0];\n};\n\nconst FermatPrimalityTest = (props) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [num, setNum] = useState(2);\n  const [base, setBase] = useState([1, 0]);\n  const [timeTaken, setTimeTaken] = useState(0);\n\n  useEffect(() => {\n    setIsProcessing(true);\n  }, [props.num, props.iterations]);\n\n  useEffect(() => {\n    if (isProcessing) {\n      setNum(props.num);\n\n      let timerStart = performance.now();\n      let computedBase = fermatCheck(props.num, props.iterations);\n      let timerEnd = performance.now();\n\n      setBase(computedBase);\n      setTimeTaken(timerEnd - timerStart);\n      setIsProcessing(false);\n    }\n  }, [isProcessing]);\n\n  return (\n    <div>\n      <h4>Fermat's Check (Probabilistic)</h4>\n      {isProcessing ? (\n        <WorkingIndicator />\n      ) : (\n        <div>\n          <PrimalityIndicator num={num} isPrime={base[0] < 2} />\n          Iterations: {props.iterations}, Confidence:{\" \"}\n          {base[0] > 1 ? 100 : 100 * (1 - Math.pow(2, -1 * props.iterations))} %\n          {base[0] > 1 ? (\n            <p class=\"my-2\">\n              {base[0].toString()}\n              <sup>{props.num.toString()}-1</sup> ≡ {base[1].toString()} (mod{\" \"}\n              {props.num.toString()})\n            </p>\n          ) : (\n            <p />\n          )}\n          <TimeIndicator time={timeTaken} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FermatPrimalityTest;\n","const bigPrimes = [\n  5109463,\n  5109479,\n  5109491,\n  5109497,\n  5109509,\n  5109529,\n  5109541,\n  5109547,\n  6345803,\n  6345821,\n  6345827,\n  6345839,\n  6345851,\n  6345853,\n  6345877,\n  6345883,\n  7580999,\n  7581001,\n  7581017,\n  7581037,\n  7581043,\n  7581047,\n  7581061,\n  7581073,\n  15485557,\n  15485567,\n  15485581,\n  15485609,\n  15485611,\n  15485621,\n  15485651,\n  15485653,\n  12389681,\n  12389687,\n  12389693,\n  12389723,\n  12389737,\n  12389747,\n  12389759,\n  12389761,\n  10505291,\n  10505317,\n  10505351,\n  10505353,\n  10505377,\n  10505387,\n  10505401,\n  10505413,\n];\n\nconst biggerPrimes = [\n  174659235533,\n  174659235539,\n  174659235589,\n  241534851319,\n  241534851329,\n  241534851407,\n  312458261431,\n  312458261491,\n  312458261497,\n  412345861957,\n  412345862003,\n  412345862063,\n  541234587563,\n  541234587583,\n  541234587601,\n  645123458803,\n  645123458831,\n  645123458893,\n  784512364609,\n  784512364631,\n  784512364637,\n  945125475221,\n  945125475227,\n  945125475251,\n  841234521581,\n  841234521599,\n  841234521649,\n];\n\nexport { bigPrimes, biggerPrimes };\n","const carmichaelNums = [\n  642708001,\n  652969351,\n  744866305,\n  745864945,\n  836515681,\n  839275921,\n];\nexport default carmichaelNums;\n","/* globals BigInt */\n\nimport React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport DeterministicPrimalityTest from \"./deterministicTest\";\nimport FermatPrimalityTest from \"./fermatTest\";\nimport { bigPrimes, biggerPrimes } from \"./bigPrimes\";\nimport carmichaelNums from \"./carmichaelNums\";\n\nconst App = () => {\n  const [num, setNum] = useState(BigInt(\"115297905820819\"));\n  const [formNum, setFormNum] = useState(\"115297905820819\");\n  const [confidence, setConf] = useState(99.9);\n  const [iter, setIter] = useState(4);\n  const [wrongInput, setWrongInput] = useState(false);\n\n  const handleSubmit = () => {\n    try {\n      let inputToNum = BigInt(formNum.toString().replace(/,/g, \"\"));\n      if (inputToNum < 2) {\n        setWrongInput(true);\n      } else {\n        setWrongInput(false);\n        setNum(inputToNum);\n        setIter(Math.ceil(Math.log2(100 / (100 - confidence))));\n      }\n    } catch {\n      setWrongInput(true);\n    }\n  };\n\n  const handleTryPrime = () => {\n    setFormNum(biggerPrimes[Math.floor(Math.random() * biggerPrimes.length)]);\n  };\n\n  const handleTryComposite = () => {\n    let p1 = bigPrimes[Math.floor(Math.random() * bigPrimes.length)];\n    let p2 = bigPrimes[Math.floor(Math.random() * bigPrimes.length)];\n    setFormNum(p1 * p2);\n  };\n\n  const handleTryCarmichael = () => {\n    setFormNum(\n      carmichaelNums[Math.floor(Math.random() * carmichaelNums.length)]\n    );\n  };\n\n  return (\n    <div class=\"text-center\">\n      <h2>Primality test</h2>\n      <h3>Deterministic vs Probabilistic algorithms</h3>\n      <a\n        href=\"https://github.com/kushsingh93/prime_algorithms\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        (view source code)\n      </a>\n      <div class=\"my-4\">\n        <div class=\"my-2\">\n          Number:{\" \"}\n          <input\n            type=\"text\"\n            value={formNum}\n            onChange={(e) => setFormNum(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.charCode === 13) handleSubmit();\n            }}\n          />{\" \"}\n          {wrongInput ? (\n            <i class=\"text-danger\">(Enter an integer &ge; 2)</i>\n          ) : null}\n        </div>\n        <div class=\"my-2\">\n          <Button\n            bsPrefix=\"btn btn-secondary btn-sm m-1\"\n            onClick={handleTryPrime}\n          >\n            Try a big prime\n          </Button>\n          <Button\n            bsPrefix=\"btn btn-secondary btn-sm m-1\"\n            onClick={handleTryComposite}\n          >\n            Try a non-prime with big prime factors\n          </Button>\n          <Button\n            bsPrefix=\"btn btn-secondary btn-sm m-1\"\n            onClick={handleTryCarmichael}\n          >\n            Try a Carmichael number (see note 4)\n          </Button>\n        </div>\n        <div class=\"my-2\">\n          Min. Confidence % (for probabilistic algo.):{\" \"}\n          <input\n            type=\"text\"\n            value={confidence}\n            style={{ width: \"10%\" }}\n            onChange={(e) => setConf(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.charCode === 13) handleSubmit();\n            }}\n          />{\" \"}\n          %\n        </div>\n        <Button variant=\"primary\" size=\"sm\" onClick={handleSubmit}>\n          Is this a prime?\n        </Button>\n      </div>\n      <div class=\"container-fluid row\">\n        <div class=\"col\">\n          <DeterministicPrimalityTest num={num} />\n        </div>\n        <div class=\"col\">\n          <FermatPrimalityTest num={num} iterations={iter} />\n        </div>\n      </div>\n      <br />\n      <p class=\"text-left\">\n        <b class=\"ml-4\">Notes.</b>\n        <ol>\n          <li>\n            The deterministic test will finish very fast if the given number has\n            even one very small factor. For example 14266523201 (= 7 *\n            2038074743).\n            <br />\n            In such cases, the perfomance advantage of the probabilistic\n            algorithm is not apparent.\n          </li>\n          <li>\n            The performance advantage of the probabilistic algorithm over the\n            deterministic one can be clearly seen when the number is a big prime\n            or a product of two or more big primes. For example 115297905820819\n            (= 7445521 * 15485539).\n          </li>\n          <li>\n            Fermat's primality test is based on{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Fermat's little theorem\n            </a>\n            . If it finds some suitable base A (1 &lt; A &lt; N-1) such that A\n            <sup>N-1</sup> ≢ 1 (mod N), then it can declare with 100% confidence\n            that n is composite.\n            <br />\n            However, if it doesn't find any such base, it declares N as a prime,\n            but with a margin of error. The probability of a false positive\n            declaration as prime is bounded by 2<sup>-K</sup> (assuming N is not\n            a Carmichael number) where K is the number of iterations of the\n            algorithm.\n          </li>\n          <li>\n            <a\n              href=\"https://en.wikipedia.org/wiki/Carmichael_number\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Carmichael numbers\n            </a>{\" \"}\n            are composite numbers with very high probability of being\n            misclassified as a prime by the Fermat's test. (This is because, for\n            a Carmichael number C, all values of A with gcd(A, C) = 1 also\n            satisfy A<sup>C-1</sup> ≡ 1 (mod C)).\n            <br />\n            This is one of the biggest flaws of the Fermat's primality test and\n            the reason why in practice, more robust probabilistic tests (like\n            the{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Miller–Rabin test)\n            </a>{\" \"}\n            are used.\n          </li>\n        </ol>\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}